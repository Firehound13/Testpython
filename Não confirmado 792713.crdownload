# -*- coding: utf-8 -*-
"""Missão_36

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TKJuVPY-ULN059oeGPjroPewQcCQqTY0
"""



def cidade_pais(cidade, pais):
  """Entra com uma cidade e um país!"""

  resultado_formatado = f"{cidade.title()}, {pais.title()}"
  return resultado_formatado

cidade_pais('vancouver', 'canada')

import unittest 

def cidade_pais(cidade, pais):
    """Entra com uma cidade e um país!"""

    resultado_formatado = print(f"{cidade.title()}, {pais.title()}")
    return resultado_formatado

class TestCaseCity(unittest.TestCase):
  """Teste para a função"""

  def test_city_country(self):
    """A função cidade_pais funciona?"""
    resultado_formatado = cidade_pais('vancouver','canada')
    self.assertEqual(resultado_formatado,('Vancouver, Canada'))

suite = unittest.TestLoader().loadTestsFromTestCase(TestCaseCity)

unittest.TextTestRunner().run(suite)

import unittest

def cidade_pais_populacao(cidade, pais, populacao):
  """Entra com uma cidade e um país!"""

  resultado_completo = print(f"{cidade.title()}, {pais.title()}, {str(populacao)}")
  return resultado_completo

class TestCaseCity(unittest.TestCase):
  """Teste para a função"""

  def test_city_country(self):
    """A função cidade_pais funciona?"""
    resultado_completo = cidade_pais_populacao('vancouver', 'canada', '1000000')
    self.assertEqual(resultado_completo, 'Vancouver, Canada 1000000')

import unittest

def cidade_pais_populacao(cidade, pais, populacao=''):
  """Entra com uma cidade e um país!"""
  if populacao:
    resultado_completo = print(f"{cidade.title()}, {pais.title()}, {str(populacao)}") 
  else:
    resultado_completo = print(f"{cidade.title()}, {pais.title()} ")
    return resultado_completo

class TestCaseCity(unittest.TestCase):
  """Teste para a função"""

  def test_city_country(self):
    """A função cidade_pais funciona?"""
    resultado_completo = cidade_pais_populacao('vancouver', 'canada', '1000000')
    self.assertEqual(resultado_completo, 'Vancouver, Canada 1000000')

